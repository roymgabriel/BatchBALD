store = {}
store['args']={'experiment_task_id': 'vgg_multi_pretrained_9031', 'experiments_laaos': None, 'experiment_description': 'RSNA MULTI:VGG CINIC (PRETRAINED)', 'batch_size': 16, 'scoring_batch_size': 32, 'test_batch_size': 32, 'validation_set_size': 10000, 'early_stopping_patience': 3, 'epochs': 30, 'epoch_samples': 5056, 'num_inference_samples': 20, 'available_sample_k': 50, 'target_num_acquired_samples': 5000, 'target_accuracy': 0.85, 'no_cuda': False, 'quickquick': False, 'seed': 9031, 'log_interval': 20, 'initial_samples_per_class': 20, 'initial_samples': None, 'type': 'AcquisitionFunction.random', 'acquisition_method': 'AcquisitionMethod.independent', 'dataset': 'DatasetEnum.rsna_multi', 'min_remaining_percentage': 100, 'min_candidates_per_acquired_item': 20, 'initial_percentage': 100, 'reduce_percentage': 0, 'balanced_validation_set': True, 'balanced_test_set': False, 'experiments_laaos': './experiment_configs/rsna_multi_vgg/configs.py'}
store['cmdline']=['MIP/BatchBALD/src/run_experiment.py', '--batch_size=16', '--scoring_batch_size=32', '--test_batch_size=32', '--validation_set_size=10000', '--early_stopping_patience=3', '--epochs=30', '--num_inference_samples=20', '--available_sample_k=50', '--target_num_acquired_samples=5000', '--target_accuracy=0.85', '--seed=9031', '--log_interval=20', '--initial_samples_per_class=20', '--type=random', '--acquisition_method=independent', '--dataset=rsna_multi', '--balanced_validation_set', '--min_remaining_percentage=100', '--min_candidates_per_acquired_item=20', '--initial_percentage=100', '--reduce_percentage=0', '--experiment_task_id=vgg_multi_pretrained_9031', '--experiment_description=RSNA MULTI:VGG CINIC (PRETRAINED)', '--experiments_laaos=./experiment_configs/rsna_multi_vgg/configs.py']
# store['Distribution of training set classes:']={1: 8226, 0: 6716, 2: 6216}
# store['Distribution of validation set classes:']={0: 928, 1: 1230, 2: 865}
# store['Distribution of test set classes:']={0: 1911, 1: 2365, 2: 1770}
# store['Distribution of pool classes:']={1: 8206, 0: 6696, 2: 6196}
# store['Distribution of active set classes:']={0: 20, 1: 20, 2: 20}
# store['active samples']=60
# store['available samples']=21098
# store['validation samples']=3023
# store['test samples']=6046
store['iterations']=[]
store['initial_samples']=[7374, 405, 8559, 5907, 13770, 15221, 8361, 7561, 4291, 8980, 17053, 18937, 17865, 20886, 15901, 20221, 7853, 4917, 14103, 2840, 8820, 4612, 9000, 11191, 16856, 18031, 18179, 8525, 7480, 11466, 2012, 18445, 13110, 5325, 1526, 10267, 14509, 8024, 6723, 20913, 8634, 16122, 1817, 20106, 941, 5297, 19101, 3261, 8671, 2934, 18064, 5803, 14637, 9698, 16451, 8380, 9377, 4653, 3554, 16261]
store['iterations'].append({'num_epochs': 15, 'test_metrics': {'accuracy': 0.3539199470724446, 'nll': 0.905427610326042, 'f1': 0.5303634565071967, 'precision': 0.5537441048856602, 'recall': 0.5902642152036824, 'ROC_AUC': 0.7419563802083333, 'PRC_AUC': 0.5211922069754162}, 'chosen_targets': [2, 2, 1, 2, 2, 1, 1, 2, 0, 1, 0, 2, 2, 0, 2, 1, 2, 0, 0, 2, 1, 0, 2, 0, 0, 0, 2, 1, 2, 2, 1, 2, 0, 2, 2, 0, 2, 2, 1, 2, 1, 1, 2, 0, 1, 1, 0, 1, 2, 2], 'chosen_samples': [19451, 3020, 17262, 11402, 6850, 1254, 4377, 16798, 18217, 19735, 11685, 8743, 11434, 18856, 4780, 10106, 9228, 19251, 18591, 1997, 5563, 12110, 13631, 4653, 17734, 6948, 13329, 11243, 8783, 8529, 4266, 18544, 3724, 1175, 9337, 10986, 13025, 7039, 13321, 15588, 12662, 3225, 850, 10445, 5851, 18781, 8909, 18495, 13186, 19922], 'chosen_samples_score': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'chosen_samples_orignal_score': None, 'train_model_elapsed_time': 1065.2822860847227, 'batch_acquisition_elapsed_time': 0.001045882236212492})
store['iterations'].append({'num_epochs': 4, 'test_metrics': {'accuracy': 0.48858749586503475, 'nll': 1.9086124219525307, 'f1': 0.44602756340089506, 'precision': 0.5068791787250424, 'recall': 0.5294742509337925, 'ROC_AUC': 0.658761935763889, 'PRC_AUC': 0.519986146533857}, 'chosen_targets': [1, 0, 0, 0, 0, 0, 2, 1, 2, 0, 0, 2, 1, 0, 1, 1, 2, 2, 1, 0, 0, 2, 2, 0, 0, 1, 1, 2, 1, 2, 2, 2, 0, 1, 1, 2, 2, 1, 0, 0, 0, 1, 0, 1, 1, 2, 1, 1, 0, 2], 'chosen_samples': [1293, 7281, 3145, 4585, 9150, 4665, 14249, 7637, 20320, 15265, 2801, 14902, 18066, 16335, 14001, 10979, 4823, 938, 410, 20434, 21038, 10830, 6092, 14454, 15897, 11837, 7085, 9711, 18355, 19214, 2029, 13297, 9881, 18117, 19112, 4626, 15520, 1020, 15128, 15322, 9929, 18431, 16713, 14048, 14984, 17694, 9690, 4427, 3375, 12747], 'chosen_samples_score': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'chosen_samples_orignal_score': None, 'train_model_elapsed_time': 303.9134592330083, 'batch_acquisition_elapsed_time': 0.0007564439438283443})
store['iterations'].append({'num_epochs': 9, 'test_metrics': {'accuracy': 0.5344029110155475, 'nll': 0.9156876544151091, 'f1': 0.4777095787006394, 'precision': 0.5404488404056029, 'recall': 0.5786752498335358, 'ROC_AUC': 0.7435904947916666, 'PRC_AUC': 0.5556841151340091}, 'chosen_targets': [0, 0, 1, 0, 1, 0, 2, 1, 0, 0, 2, 1, 2, 1, 1, 1, 1, 1, 0, 1, 1, 2, 0, 1, 2, 2, 1, 2, 0, 0, 1, 1, 2, 0, 0, 1, 0, 2, 1, 1, 0, 0, 2, 0, 1, 2, 2, 0, 1, 1], 'chosen_samples': [378, 6613, 15443, 11741, 17, 14443, 6433, 6175, 12593, 18707, 16930, 7271, 14268, 3283, 9981, 17857, 1510, 7779, 16042, 11247, 18926, 5784, 17149, 18497, 6963, 12310, 14596, 15442, 12196, 13855, 17414, 20875, 16603, 17360, 7314, 15240, 14162, 18501, 5764, 9638, 12732, 4218, 1454, 6498, 317, 16881, 20271, 15766, 13018, 8345], 'chosen_samples_score': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'chosen_samples_orignal_score': None, 'train_model_elapsed_time': 650.9483543401584, 'batch_acquisition_elapsed_time': 0.0007552220486104488})
store['iterations'].append({'num_epochs': 8, 'test_metrics': {'accuracy': 0.49090307641415815, 'nll': 0.9602451356010172, 'f1': 0.445112768991792, 'precision': 0.4941309340244667, 'recall': 0.5266114443770843, 'ROC_AUC': 0.7036990017361111, 'PRC_AUC': 0.5056615909208159}, 'chosen_targets': [1, 2, 1, 0, 1, 0, 0, 2, 1, 0, 0, 0, 0, 2, 2, 2, 2, 1, 2, 1, 2, 0, 0, 2, 1, 2, 1, 0, 1, 1, 0, 1, 2, 1, 1, 0, 0, 0, 0, 0, 1, 2, 0, 2, 0, 1, 1, 1, 0, 2], 'chosen_samples': [14537, 14867, 14279, 8400, 9412, 11465, 13652, 8086, 19520, 18147, 1913, 20100, 8901, 9206, 13159, 2247, 20783, 20787, 15033, 17937, 12207, 2040, 14266, 15119, 16490, 2131, 7454, 14887, 10790, 9931, 2067, 18563, 15198, 14331, 8253, 7827, 8658, 4822, 2259, 3761, 9397, 5368, 15272, 20419, 14800, 11600, 20483, 3856, 4668, 18322], 'chosen_samples_score': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'chosen_samples_orignal_score': None, 'train_model_elapsed_time': 581.3575143567286, 'batch_acquisition_elapsed_time': 0.0010240660049021244})
store['iterations'].append({'num_epochs': 7, 'test_metrics': {'accuracy': 0.3911677141912008, 'nll': 1.097270616032294, 'f1': 0.5623588158364048, 'precision': 0.1303892380637336, 'recall': 0.3333333333333333, 'ROC_AUC': 0.5234375, 'PRC_AUC': 0.3860677083333333}, 'chosen_targets': [1, 2, 0, 0, 2, 0, 2, 1, 1, 1, 1, 2, 0, 1, 0, 1, 1, 1, 2, 2, 1, 1, 1, 1, 0, 0, 0, 2, 0, 1, 0, 2, 2, 0, 1, 2, 1, 0, 1, 0, 2, 0, 2, 1, 1, 0, 0, 0, 0, 2], 'chosen_samples': [9141, 8594, 14354, 9502, 11958, 8520, 14205, 13198, 10172, 16926, 16592, 15048, 14658, 3965, 8584, 9064, 5874, 1255, 1280, 10118, 7645, 3321, 3623, 6302, 8693, 8463, 615, 5108, 1890, 9372, 19392, 18089, 16194, 18371, 19255, 12806, 15738, 10102, 5896, 15868, 7409, 16630, 11560, 17581, 11541, 4043, 3331, 3305, 3579, 3102], 'chosen_samples_score': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'chosen_samples_orignal_score': None, 'train_model_elapsed_time': 511.73556670965627, 'batch_acquisition_elapsed_time': 0.0010538483038544655})
store['iterations'].append({'num_epochs': 7, 'test_metrics': {'accuracy': 0.3911677141912008, 'nll': 1.0955335268152497, 'f1': 0.5623588158364048, 'precision': 0.1303892380637336, 'recall': 0.3333333333333333, 'ROC_AUC': 0.5234375, 'PRC_AUC': 0.3860677083333333}, 'chosen_targets': [2, 0, 0, 2, 0, 1, 0, 2, 1, 2, 0, 1, 2, 1, 0, 0, 1, 2, 2, 2, 1, 0, 2, 0, 1, 1, 0, 2, 0, 1, 0, 1, 2, 1, 1, 0, 0, 2, 2, 1, 0, 2, 0, 2, 0, 0, 0, 1, 0, 1], 'chosen_samples': [11592, 3904, 13890, 682, 13444, 0, 11921, 5692, 14979, 19187, 14458, 15600, 6319, 4783, 8664, 8315, 19145, 15548, 6499, 5319, 15878, 10978, 8207, 12717, 4618, 6276, 11765, 8713, 12601, 3734, 1444, 4555, 14564, 16622, 11354, 14825, 78, 2698, 19234, 8141, 14536, 18854, 17485, 1270, 5296, 19575, 8140, 11343, 13761, 119], 'chosen_samples_score': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'chosen_samples_orignal_score': None, 'train_model_elapsed_time': 511.7326709940098, 'batch_acquisition_elapsed_time': 0.0007603629492223263})
store['iterations'].append({'num_epochs': 6, 'test_metrics': {'accuracy': 0.5363876943433675, 'nll': 0.8855173487636454, 'f1': 0.4774146413944565, 'precision': 0.5266924571453716, 'recall': 0.5807073331596109, 'ROC_AUC': 0.7585655381944444, 'PRC_AUC': 0.6200970947903168}, 'chosen_targets': [1, 0, 0, 2, 1, 2, 0, 1, 2, 2, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 2, 1, 2, 0, 2, 1, 2, 2, 2, 2, 2, 0, 2, 1, 1, 1, 0, 0, 0, 2, 1, 2, 2, 1, 2, 0, 2, 1, 0, 1], 'chosen_samples': [15726, 8661, 539, 16228, 14986, 1263, 18135, 11206, 6379, 13819, 10328, 19401, 20675, 18572, 16697, 17254, 20695, 15876, 2180, 15784, 8649, 15814, 7471, 604, 12198, 8895, 917, 7167, 5127, 11552, 18150, 10978, 12605, 7931, 15040, 12194, 9980, 19192, 212, 11999, 9371, 13130, 14461, 2964, 3870, 483, 16964, 16488, 2767, 11832], 'chosen_samples_score': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'chosen_samples_orignal_score': None, 'train_model_elapsed_time': 443.36699836701155, 'batch_acquisition_elapsed_time': 0.0007690689526498318})
store['iterations'].append({'num_epochs': 6, 'test_metrics': {'accuracy': 0.5911677141912008, 'nll': 1.0970462618621817, 'f1': 0.5623588158364048, 'precision': 0.1303892380637336, 'recall': 0.3333333333333333, 'ROC_AUC': 0.5234375, 'PRC_AUC': 0.3860677083333333}, 'chosen_targets': [1, 2, 0, 1, 1, 1, 2, 2, 2, 1, 2, 0, 1, 2, 0, 1, 0, 1, 1, 0, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 0, 1, 1, 1, 0, 0, 2, 0, 1, 1, 2, 0, 0, 0, 2, 2], 'chosen_samples': [16790, 4450, 10988, 18278, 16464, 4914, 3802, 13019, 12143, 5545, 14235, 5788, 5092, 386, 18650, 17303, 12731, 16624, 7276, 14423, 14920, 3755, 6753, 10859, 8761, 6842, 5427, 8588, 3287, 16964, 19288, 17914, 442, 13133, 11733, 629, 812, 9245, 16505, 16140, 1778, 3374, 3517, 13509, 8093, 9787, 12459, 11694, 10682, 16757], 'chosen_samples_score': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'chosen_samples_orignal_score': None, 'train_model_elapsed_time': 440.1952541898936, 'batch_acquisition_elapsed_time': 0.0010539409704506397})
store['iterations'].append({'num_epochs': 7, 'test_metrics': {'accuracy': 0.5856103208733047, 'nll': 0.9721917932569054, 'f1': 0.4476247066620367, 'precision': 0.5019049250817821, 'recall': 0.5271283852510272, 'ROC_AUC': 0.6907378472222222, 'PRC_AUC': 0.522840134414831}, 'chosen_targets': [0, 2, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 2, 2, 2, 1, 2, 1, 0, 0, 1, 1, 0, 0, 0, 2, 2, 1, 1, 0, 2, 0, 2, 1, 0, 2, 2, 0, 2, 0, 1, 1, 2, 1, 1], 'chosen_samples': [17505, 17360, 12373, 4421, 3710, 7169, 19808, 13529, 7466, 11785, 20288, 5233, 3586, 20505, 10461, 17549, 2811, 17719, 19633, 6295, 13073, 18341, 16827, 6639, 18850, 5068, 6334, 0, 17644, 18721, 1649, 2139, 1371, 7559, 1100, 4451, 14874, 5270, 17091, 13071, 7811, 16234, 6989, 13025, 14831, 14915, 15246, 14101, 5006, 7463], 'chosen_samples_score': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'chosen_samples_orignal_score': None, 'train_model_elapsed_time': 512.138168990612, 'batch_acquisition_elapsed_time': 0.0007728990167379379})
store['iterations'].append({'num_epochs': 11, 'test_metrics': {'accuracy': 0.5528613959642739, 'nll': 1.063023735346717, 'f1': 0.5381224159270017, 'precision': 0.317368529427647, 'recall': 0.42397735155210237, 'ROC_AUC': 0.6537391493055555, 'PRC_AUC': 0.4439828095841339}, 'chosen_targets': [0, 0, 0, 2, 0, 0, 1, 2, 1, 2, 2, 1, 2, 1, 1, 0, 2, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 2, 0, 2, 0, 1, 2, 0, 2, 2, 0, 1, 1, 2, 1, 1, 1, 2, 2, 0, 1, 1, 1, 0], 'chosen_samples': [5892, 2474, 3829, 5057, 9160, 8542, 19695, 12037, 782, 11558, 4451, 7063, 5991, 10189, 3087, 6694, 8229, 10732, 16385, 17060, 20411, 12688, 9194, 4768, 15950, 8702, 10787, 14835, 10160, 11885, 1888, 2535, 18055, 5032, 16012, 584, 18587, 13738, 20473, 16766, 10013, 8912, 20059, 2312, 5351, 11006, 6296, 6136, 6023, 16759], 'chosen_samples_score': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'chosen_samples_orignal_score': None, 'train_model_elapsed_time': 788.7636931459419, 'batch_acquisition_elapsed_time': 0.0010314700193703175})
