store = {}
store['args']={'experiment_description': 'RSNA MULTI:RESNET BN DROPOUT MULTI BALD (SCRATCH)', 'batch_size': 32, 'scoring_batch_size': 128, 'test_batch_size': 128, 'validation_set_size': 5000, 'early_stopping_patience': 3, 'epochs': 30, 'epoch_samples': 5056, 'num_inference_samples': 50, 'available_sample_k': 10, 'target_num_acquired_samples': 250, 'target_accuracy': 0.9, 'quickquick': False, 'seed': 58, 'log_interval': 20, 'initial_samples_per_class': 10, 'initial_samples': None, 'min_remaining_percentage': 100, 'min_candidates_per_acquired_item': 1, 'initial_percentage': 100, 'reduce_percentage': 0, 'balanced_validation_set': True, 'balanced_test_set': False, 'no_cuda': False, 'experiment_task_id': 'mnist_full_resnet_multi_scratch_multibald_58', 'experiments_laaos': './experiment_configs/MNIST/scratch_multi_config.py', 'type': 'AcquisitionFunction.random', 'acquisition_method': 'AcquisitionMethod.independent', 'dataset': 'DatasetEnum.mnist'}
store['cmdline']=['MIP/BatchBALD/src/run_experiment.py', '--experiment_task_id=mnist_full_resnet_multi_scratch_multibald_58', '--experiments_laaos=./experiment_configs/MNIST/scratch_multi_config.py', '--dataset=mnist', '--type=random', '--acquisition_method=independent']
# store['Distribution of training set classes:']={5: 5421, 0: 5923, 4: 5842, 1: 6742, 9: 5949, 2: 5958, 3: 6131, 6: 5918, 7: 6265, 8: 5851}
# store['Distribution of validation set classes:']={6: 500, 0: 500, 4: 500, 7: 500, 1: 500, 8: 500, 2: 500, 5: 500, 3: 500, 9: 500}
# store['Distribution of test set classes:']={7: 1028, 2: 1032, 1: 1135, 0: 980, 4: 982, 9: 1009, 5: 892, 6: 958, 3: 1010, 8: 974}
# store['Distribution of pool classes:']={5: 4911, 4: 5332, 1: 6232, 9: 5439, 2: 5448, 3: 5621, 6: 5408, 7: 5755, 8: 5341, 0: 5413}
# store['Distribution of active set classes:']={7: 10, 6: 10, 0: 10, 1: 10, 3: 10, 8: 10, 4: 10, 2: 10, 9: 10, 5: 10}
# store['active samples']=100
# store['available samples']=54900
# store['validation samples']=5000
# store['test samples']=10000
store['iterations']=[]
store['initial_samples']=[16515, 39247, 40458, 15972, 57627, 21510, 31394, 15693, 26902, 29993, 37132, 11874, 42054, 8808, 45699, 5770, 28734, 22293, 30379, 8228, 25983, 45006, 23693, 2159, 36095, 53627, 48629, 2355, 13474, 20506, 46759, 57124, 56658, 46720, 35147, 59850, 21233, 35062, 47972, 17819, 1897, 44777, 11902, 32800, 10022, 9881, 5317, 44692, 22707, 7557, 30344, 58611, 48383, 44828, 52242, 45216, 39592, 15279, 59317, 35071, 52430, 32516, 15724, 14872, 39378, 6957, 27636, 56378, 51008, 29342, 19488, 57036, 1536, 58998, 25068, 25337, 26958, 17344, 21854, 32003, 49072, 20484, 42587, 17590, 36742, 39435, 44013, 35229, 47805, 13385, 54066, 11274, 49507, 56233, 3283, 9711, 634, 13513, 52587, 49921]
store['iterations'].append({'num_epochs': 9, 'test_metrics': {'accuracy': 0.8386, 'nll': 0.878399609375, 'f1': 0.8347332002420542, 'precision': 0.8400301629030953, 'recall': 0.8366722165944734, 'ROC_AUC': 0.9645589192708334, 'PRC_AUC': 0.8710771049080174}, 'chosen_targets': [1, 6, 9, 8, 3, 5, 3, 4, 3, 3], 'chosen_samples': [31406, 9409, 22458, 2215, 32775, 30961, 21156, 52015, 27132, 55050], 'chosen_samples_score': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'chosen_samples_orignal_score': None, 'train_model_elapsed_time': 55.927294546272606, 'batch_acquisition_elapsed_time': 0.001669946126639843})
store['iterations'].append({'num_epochs': 16, 'test_metrics': {'accuracy': 0.8873, 'nll': 0.66531728515625, 'f1': 0.886430209578452, 'precision': 0.8906331733305031, 'recall': 0.8865195075165915, 'ROC_AUC': 0.9763929578993056, 'PRC_AUC': 0.9148918171119903}, 'chosen_targets': [8, 3, 9, 3, 3, 3, 7, 9, 4, 7], 'chosen_samples': [1170, 23997, 59443, 35221, 57864, 43135, 41275, 53680, 25419, 14850], 'chosen_samples_score': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'chosen_samples_orignal_score': None, 'train_model_elapsed_time': 98.65272514522076, 'batch_acquisition_elapsed_time': 0.0012751161120831966})
store['iterations'].append({'num_epochs': 9, 'test_metrics': {'accuracy': 0.8645, 'nll': 0.7177107421875, 'f1': 0.8636406845995573, 'precision': 0.8694617717157185, 'recall': 0.8628044416686855, 'ROC_AUC': 0.970004611545139, 'PRC_AUC': 0.9017306340866447}, 'chosen_targets': [9, 9, 9, 6, 3, 0, 0, 4, 7, 1], 'chosen_samples': [52203, 39924, 49564, 3537, 22443, 18178, 46683, 37104, 40911, 27531], 'chosen_samples_score': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'chosen_samples_orignal_score': None, 'train_model_elapsed_time': 57.44651344418526, 'batch_acquisition_elapsed_time': 0.0013527949340641499})
store['iterations'].append({'num_epochs': 12, 'test_metrics': {'accuracy': 0.8794, 'nll': 0.643180322265625, 'f1': 0.876990920272355, 'precision': 0.8778366276312, 'recall': 0.8785804988839461, 'ROC_AUC': 0.977688259548611, 'PRC_AUC': 0.9332579554287728}, 'chosen_targets': [1, 3, 6, 5, 7, 2, 8, 2, 8, 0], 'chosen_samples': [48720, 53104, 31270, 46365, 38819, 14108, 54909, 40119, 29877, 2483], 'chosen_samples_score': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'chosen_samples_orignal_score': None, 'train_model_elapsed_time': 75.71524389274418, 'batch_acquisition_elapsed_time': 0.0018066354095935822})
store['iterations'].append({'num_epochs': 12, 'test_metrics': {'accuracy': 0.9051, 'nll': 0.49244296875, 'f1': 0.9042539379484262, 'precision': 0.905778929434063, 'recall': 0.9051254574095473, 'ROC_AUC': 0.982696533203125, 'PRC_AUC': 0.9413829893736323}, 'chosen_targets': [6, 3, 1, 5, 5, 9, 7, 5, 5, 5], 'chosen_samples': [29997, 34629, 475, 44938, 47661, 55792, 56131, 33605, 22951, 8339], 'chosen_samples_score': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'chosen_samples_orignal_score': None, 'train_model_elapsed_time': 76.02349705435336, 'batch_acquisition_elapsed_time': 0.0017672921530902386})
